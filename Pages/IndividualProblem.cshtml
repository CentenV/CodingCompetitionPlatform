@page "/problem"
@using CodingCompetitionPlatform.Services
@model CodingCompetitionPlatform.Pages.ProblemModel
@{
    // Making sure that problems are initialized
    LoadProblems.Initialize();

    Problem currentProblem;
    try
    {
        currentProblem = LoadProblems.PROBLEMS[Model.problemIndex - 1];
    }
    catch (Exception ex)
    {
        currentProblem = LoadProblems.Empty();
        Console.WriteLine(ex);
    }
}

<script>
    // Change Status to Waiting
    function loadingStatusMsg() {
        document.getElementById("code-output").innerHTML = "Code Submitted. ✔️\n Processing... ⏳";
    }

    // Toggle the Upload Type
    function toggleUploadType() {
        if (document.getElementById("file-upload").style.display == "none")
        {
            document.getElementById("toggle-uploadtype-button").innerHTML = "Code Block";
            document.getElementById("file-upload").style.display = "block";
            document.getElementById("code-box-container").style.display = "none";
            document.getElementById("code-box-textarea").value = "";
        }
        else
        {
            document.getElementById("toggle-uploadtype-button").innerHTML = "Upload File";
            document.getElementById('file-upload').style.display = "none";
            document.getElementById('file-upload').value = "";
            document.getElementById("code-box-container").style.display = "block";
        }
    }
    function langOptionChanged(lang) {
        const javaPreloadCode = "class ProblemSolution\n{\n}";
        if (lang == "java")
        {
            document.getElementById("code-box-textarea").value = javaPreloadCode;
        }
        else
        {
            if (document.getElementById("code-box-textarea").value == javaPreloadCode) {
                document.getElementById("code-box-textarea").value = "";
            }
        }
    }

    //Allow for Indentation with Tab Key in the Textbox
    window.addEventListener("load", function() {
        document.getElementById("code-box-textarea").onkeydown = function (e) {
            if (e.key === 'Tab') {  
                // Prevent the focus loss
                e.preventDefault();
                // Get caret position/selection
                var start = this.selectionStart;
                var end = this.selectionEnd;

                var target = e.target;
                var value = target.value;

                // Set textarea value to: text before caret + tab + text after caret
                target.value = value.substring(0, start) + "\t" + value.substring(end);

                // Put caret at right position again
                this.selectionStart = this.selectionEnd = start + 1;
            }
        }
    });
</script>

<!-- PROBLEM INFO AND UPLOAD -->
<div id="problem-container">
    <div id="problem-info-container">
        <div id="problem-header">
            <span id="problem-title">@currentProblem.name</span>
            <div id="problem-details">
                <div>Problem @currentProblem.problemIndex</div>
                <div>@currentProblem.runCases run cases, @currentProblem.testCases test cases</div>
            </div>
        </div>
        <div id="problem-detail-description">
            <p>@currentProblem.description</p>
        </div>
    </div>

    <div id="problem-submission-container">
        @if (!Model.GetCompletionStatus())
        {
            <button id="toggle-uploadtype-button" onclick="toggleUploadType()">Upload File</button>
            <form method="post" enctype="multipart/form-data" onsubmit="loadingStatusMsg()">
                <!--Codebox/Textbox Input-->
                <div id="code-box-container">
                    <div id="language-selector">
                        <input onclick="langOptionChanged('java')" type="radio" asp-for="language" value="Java" id="language-selector-java">
                        <label for="language-selector-java">Java</label>
                        <input onclick="langOptionChanged('python')" type="radio" asp-for="language" value="Python">
                        <label>Python</label>
                        <input onclick="langOptionChanged('javascript')" type="radio" asp-for="language" value="JavaScript">
                        <label>JavaScript</label>
                    </div>
                    <div>
                        <textarea id="code-box-textarea" asp-for="uploadedCode" cols="30" rows="10" spellcheck="false"></textarea>
                    </div>
                </div>

                <!--File Upload-->
                <label class="file">
                    <input type="file" accept=".py, .js, .java" asp-for="uploadedFile" style="display:none" id="file-upload" />
                    <span class="file-custom"></span>
                </label>

                <!--Submit Button-->
                <input type="submit" value="Submit Code" id="submit-code-button" />
            </form>
        }
    </div>
    
    <div id="code-output" class="code">@Model.status</div>
</div>


<!-- CODE RESULTS SECTION (whether test case passed or fail) -->
@if (Model.displayCasesStatus && (Model.runCasesAllOutput != null) && (Model.testCasesAllOutput != null))
{
    <div id="results-container">
        <!-- Code for Results Tabs -->
        <script>
            function displayExecutedCase(event, displayName) {
                // Hide Items
                tabContent = document.getElementsByClassName("result-tab-content");
                console.log(tabContent.length);
                for (let i = 0; i < tabContent.length; i++) {
                    tabContent[i].style.display = "none";
                }
                // Set Active Tab In Bar
                tabOptions = document.getElementsByClassName("report-tab-option");
                for (let i = 0; i < tabOptions.length; i++) {
                    tabOptions[i].className = tabOptions[i].className.replace(" active", "");
                }
                // Show Items
                document.getElementById(displayName).style.display = "block";
                event.currentTarget.className += " active";
            }
        </script>

        <div id="code-report">
            <!-- Initialize Case Header Selection -->
            <div id="result-report-tab-bar">
                @for (int i = 0; i < currentProblem.runCases; i++)
                {
                    string contentDisplayName = $"runcase{i + 1}";
                    @if (Model.runCasesAllOutput[i].passChallenge == true)
                    {
                        <button class="report-tab-option problem-passed" onclick="displayExecutedCase(event, '@contentDisplayName')">Run Case @(i + 1)</button>
                    }
                    else
                    {
                        <button class="report-tab-option problem-failed" onclick="displayExecutedCase(event, '@contentDisplayName')">Run Case @(i + 1)</button>
                    }
                }
                @for (int i = 0; i < currentProblem.testCases; i++)
                {
                    string contentDisplayName = $"testcase{i + 1}";
                    @if (Model.testCasesAllOutput[i].passChallenge == true)
                    {
                        <button class="report-tab-option problem-passed" onclick="displayExecutedCase(event, '@contentDisplayName')">Test Case @(i + 1)</button>
                    }
                    else
                    {
                        <button class="report-tab-option problem-failed" onclick="displayExecutedCase(event, '@contentDisplayName')">Test Case @(i + 1)</button>
                    }
                }
            </div>

            <!-- Case Content -->
            <div id="result-output-content">
                @for (int i = 0; i < currentProblem.runCases; i++)
                {
                    string contentDisplayName = $"runcase{i + 1}";
                    <div class="result-tab-content" id="@contentDisplayName">
                        @if (Model.runCasesAllOutput[i].passChallenge == true)
                        {
                            <div class="status-text passed">Run Case PASSED</div>
                        }
                        else
                        {
                            <div class="status-text failed">Run Case FAILED</div>
                        }
                        <div class="actual-output-container">
                            <span class="output-tag">Actual Output</span>
                            <div class="code runcase-expected-output">@Model.runCasesAllOutput[i].actualOutputContent</div>
                        </div>
                        @if (Model.runCasesAllOutput[i].compilerError.Length > 0)
                        {
                            <div class="compiler-output-container">
                                <span class="output-tag">Compiler Output (stderr)</span>
                                <div class="code runcase-compiler-output">@Model.runCasesAllOutput[i].compilerError</div>
                            </div>
                        }
                        <div class="expected-output-container">
                            <span class="output-tag">Expected Output</span>
                            <div class="code testcase-expected-output">@Model.runCasesAllOutput[i].expectedOutputContent</div>
                        </div>
                        <div class="case-identifier">Run Case @(i + 1)</div>
                    </div>
                }
                @for (int i = 0; i < currentProblem.testCases; i++)
                {
                    string contentDisplayName = $"testcase{i + 1}";
                    <div class="result-tab-content" id="@contentDisplayName">
                        @if (Model.testCasesAllOutput[i].passChallenge == true)
                        {
                            <div class="status-text passed">Test Case PASSED</div>
                        }
                        else
                        {
                            <div class="status-text failed">Test Case FAILED</div>
                        }
                        <div class="actual-output-container">
                            <span class="output-tag">Actual Output</span>
                            <div class="code runcase-expected-output">@Model.testCasesAllOutput[i].actualOutputContent</div>
                        </div>
                        <div class="expected-output-container">
                            <span class="output-tag">Expected Output</span>
                            <div class="code testcase-expected-output">@Model.testCasesAllOutput[i].expectedOutputContent</div>
                        </div>
                        <div class="case-identifier">@Model.submittedLanguage.ToString(), Test Case @(i + 1)</div>
                    </div>
                }
            </div>
        </div>
    </div>
}